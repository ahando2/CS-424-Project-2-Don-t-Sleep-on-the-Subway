# 3
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 3)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
# 4
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 4)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
# 5
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 5)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
# 6
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 6)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
sd(us_state_populations$populations)
us_state_populations <- read.table(file = "https://www.evl.uic.edu/aej/424/us_state_populations.csv",
sep = ",")
colnames(us_state_populations)<- c("state","populations")
sd(us_state_populations$populations)
summary(us_state_populations$populations)
sd(us_state_populations$populations)
summary(us_state_populations$populations)
ggplot(data = us_state_populations)
ggplot(data = us_state_populations)+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations, aes(x=us_state_populations$state, y=us_state_populations$populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations, aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations[order(us_state_populations$populations),], aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
us_state_populations<- us_state_populations[order(us_state_populations$populations),]
us_state_populations<- us_state_populations[order(us_state_populations$populations),]
ggplot(data = us_state_populations, aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations, aes(x=reorde(state,-value), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations, aes(x=reorder(state,-value), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations, aes(x=reorder(state,-state), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations, aes(x=reorder(us_state_populations,-state), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue") + scale_y_continuous()
us_state_populations <- read.table(file = "https://www.evl.uic.edu/aej/424/us_state_populations.csv",
sep = ",")
colnames(us_state_populations)<- c("state","populations")
sd(us_state_populations$populations)
summary(us_state_populations$populations)
sd(us_state_populations$populations)
summary(us_state_populations$populations)
sd(us_state_populations$populations)
summary(us_state_populations$populations)
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")
us_state_populations[order(us_state_populations$populations),]
# 6
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 10)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
# 6
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 9)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
6
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")
abline(h = 1858120, col = "darkgreen")
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=1858120)
quantile(us_state_populations$populations)
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=1858120) +
geom_hline(yintercept=4531567) +
geom_hline(yintercept=6982500)
quantile(us_state_populations$populations)
quantile(us_state_populations$populations)
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=1858120) +
geom_hline(yintercept=4531567) +
geom_hline(yintercept=6982500)
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(xintercept=1858120) +
geom_hline(yintercept=4531567) +
geom_hline(yintercept=6982500)
y
quantile(us_state_populations$populations)
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=1858120) +
geom_hline(yintercept=4531567) +
geom_hline(yintercept=6982500)
# 6
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 6)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
## Natural Breaks
```{r}
ggplot(data = us_state_populations, aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=1858120) +
geom_hline(yintercept=4531567) +
geom_hline(yintercept=6982500)
ggplot(data = us_state_populations, aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
ggplot(data = us_state_populations, aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")
quantile(us_state_populations$populations)
ggplot(data = us_state_populations, aes(x=state,-populations), y=populations))+
quantile(us_state_populations$populations)
ggplot(data = us_state_populations, aes(x=(state,-populations), y=populations))+
quantile(us_state_populations$populations)
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")
ggplot(data = us_state_populations, aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")
ggplot(data = us_state_populations, aes(x=state, y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")
rgeom(n = 5, prob = 2)
rgeom(n = 5, prob = 0.2)
2^seq(0,5,by=1)
584153*2^seq(0,5,by=1)
c(584153*2^seq(0,5,by=1))
geometric_seq <- c(584153*3^seq(0,5,by=1))
geometric_seq <-
c(584153*3^seq(0,5,by=1))
c(584153*3^seq(0,5,by=1))
geometric_seq <- c(584153*2^seq(0,5,by=1))
geometric_seq <- c(584153*2^seq(0,4,by=1))
geometric_seq <- c(584153*2^seq(0,4,by=1))
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=geometric_seq[1]) +
geom_hline(yintercept=geometric_seq[2]) +
geom_hline(yintercept=geometric_seq[3]) +
geom_hline(yintercept=geometric_seq[4]) +
geom_hline(yintercept=geometric_seq[5]) +
geometric_seq <- c(584153*2^seq(0,4,by=1))
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=geometric_seq[1]) +
geom_hline(yintercept=geometric_seq[2]) +
geom_hline(yintercept=geometric_seq[3]) +
geom_hline(yintercept=geometric_seq[4]) +
geom_hline(yintercept=geometric_seq[5])
geometric_seq <- c(584153*3^seq(0,4,by=1))
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=geometric_seq[1]) +
geom_hline(yintercept=geometric_seq[2]) +
geom_hline(yintercept=geometric_seq[3]) +
geom_hline(yintercept=geometric_seq[4]) +
geom_hline(yintercept=geometric_seq[5])
geometric_seq <- c(584153*2^seq(0,4,by=1))
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=geometric_seq[1]) +
geom_hline(yintercept=geometric_seq[2]) +
geom_hline(yintercept=geometric_seq[3]) +
geom_hline(yintercept=geometric_seq[4]) +
geom_hline(yintercept=geometric_seq[5])
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=geometric_seq[1]) +
geom_hline(yintercept=geometric_seq[2]) +
geom_hline(yintercept=geometric_seq[3]) +
geom_hline(yintercept=geometric_seq[4]) +
geom_hline(yintercept=geometric_seq[5]) +
geom_hline(yintercept=geometric_seq[6])
geometric_seq <- c(584153*2^seq(0,5,by=1))
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=geometric_seq[1]) +
geom_hline(yintercept=geometric_seq[2]) +
geom_hline(yintercept=geometric_seq[3]) +
geom_hline(yintercept=geometric_seq[4]) +
geom_hline(yintercept=geometric_seq[5]) +
geom_hline(yintercept=geometric_seq[6])
geometric_seq <- c(min(us_state_populations$populations)*2^seq(0,5,by=1))
geometric_seq
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=geometric_seq[1]) +
geom_hline(yintercept=geometric_seq[2]) +
geom_hline(yintercept=geometric_seq[3]) +
geom_hline(yintercept=geometric_seq[4]) +
geom_hline(yintercept=geometric_seq[5]) +
geom_hline(yintercept=geometric_seq[6])
summary(us_state_populations$populations)
us_state_populations <- read.table(file = "https://www.evl.uic.edu/aej/424/us_state_populations.csv",
sep = ",")
colnames(us_state_populations)<- c("state","populations")
sd(us_state_populations$populations)
summary(us_state_populations$populations)
intervals = (max(us_state_populations$populations)-min(us_state_populations$populations))/5
equal_seq <- c(seq(min(us_state_populations$populations),5,by=intervals))
intervals <- (max(us_state_populations$populations)-min(us_state_populations$populations))/5
equal_seq <- c(seq(min(us_state_populations$populations),5,by=intervals))
intervals
equal_seq <- c(seq(min(us_state_populations$populations),5,by=7643669.4))
equal_seq <- c(seq(min(us_state_populations$populations),5,by=7643669))
intervals <- (max(us_state_populations$populations)-min(us_state_populations$populations))/5
equal_seq <- c(seq(min(us_state_populations$populations),max(us_state_populations$populations),by=intervals))
equal_seq
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=equal_seq[1]) +
geom_hline(yintercept=equal_seq[2]) +
geom_hline(yintercept=equal_seq[3]) +
geom_hline(yintercept=equal_seq[4]) +
geom_hline(yintercept=equal_seq[5]) +
geom_hline(yintercept=equal_seq[6])
equal_seq <- c(seq(min(us_state_populations$populations),max(us_state_populations$populations)-intervals,by=intervals))
intervals <- (max(us_state_populations$populations)-min(us_state_populations$populations))/5
equal_seq <- c(seq(min(us_state_populations$populations),max(us_state_populations$populations)-intervals,by=intervals))
equal_seq
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=equal_seq[1]) +
geom_hline(yintercept=equal_seq[2]) +
geom_hline(yintercept=equal_seq[3]) +
geom_hline(yintercept=equal_seq[4]) +
geom_hline(yintercept=equal_seq[5]) +
geom_hline(yintercept=equal_seq[6])
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=equal_seq[1]) +
geom_hline(yintercept=equal_seq[2]) +
geom_hline(yintercept=equal_seq[3]) +
geom_hline(yintercept=equal_seq[4]) +
geom_hline(yintercept=equal_seq[5])
intervals <- (max(us_state_populations$populations)-min(us_state_populations$populations))/5
equal_seq <- c(seq(min(us_state_populations$populations),max(us_state_populations$populations)-intervals,by=intervals))
equal_seq
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=equal_seq[1]) +
geom_hline(yintercept=equal_seq[2]) +
geom_hline(yintercept=equal_seq[3]) +
geom_hline(yintercept=equal_seq[4]) +
geom_hline(yintercept=equal_seq[5])
intervals <- (max(us_state_populations$populations)-min(us_state_populations$populations))/6
equal_seq <- c(seq(min(us_state_populations$populations),max(us_state_populations$populations)-intervals,by=intervals))
equal_seq
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=equal_seq[2]) +
geom_hline(yintercept=equal_seq[3]) +
geom_hline(yintercept=equal_seq[4]) +
geom_hline(yintercept=equal_seq[5])
intervals <- (max(us_state_populations$populations)-min(us_state_populations$populations))/6
equal_seq <- c(seq(min(us_state_populations$populations),max(us_state_populations$populations)-intervals,by=intervals))
equal_seq
ggplot(data = us_state_populations, aes(x=reorder(state,-populations), y=populations))+
labs(x="State", y = "Populations") +
geom_bar(stat="identity", fill="steelblue")+
geom_hline(yintercept=equal_seq[2]) +
geom_hline(yintercept=equal_seq[3]) +
geom_hline(yintercept=equal_seq[4]) +
geom_hline(yintercept=equal_seq[5]) +
geom_hline(yintercept=equal_seq[6])
# 5
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 5)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "Green")
# 3
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 3)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "Green")
# 4
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 4)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "Green")
# 6
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 6)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "Green")
# 4
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 4)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
# 5
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 5)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
# 6
usa_sf() %>% mutate(pop_cut = cut_number(pop_2014, n = 6)) %>%  ggplot() + geom_sf(aes(fill = pop_cut)) + scale_fill_brewer(palette = "BuGn")
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
shiny::runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
shiny::runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/data/evlWeatherForR/evlWeatherForR')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp()
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2/SubwayLarge')
# get only columns station_id,stationname,date,rides
CTA_daily <- CTA_daily[,c("station_id","stationname","date","rides")]
# get only columns s"MAP_ID","STATION_NAME","Location"
CTA_LatLon <- CTA_LatLon[,c("MAP_ID","Location")]
colnames(CTA_LatLon)[1] <- "station_id"
CTA_LatLon$Location <- gsub('[( )]',"",as.character(CTA_LatLon$Location))
lat_lon<-unlist(strsplit(CTA_LatLon$Location,","))
CTA_LatLon$latitude <- lat_lon[c(TRUE, FALSE)]
CTA_LatLon$longtitude <- lat_lon[c(FALSE, TRUE)]
CTA_LatLon <- subset(CTA_LatLon,select= -c(Location))
CTA_LatLon$latitude <- as.numeric(CTA_LatLon$latitude)
CTA_LatLon$longtitude <- as.numeric(CTA_LatLon$longtitude)
CTA_LatLon <- unique(CTA_LatLon)
CTA_daily$latitude <- NA
CTA_daily$longtitude <- NA
CTA_LatLon$stationname <- NA
# check for duplicates of station_id
n_occur <- data.frame(table(CTA_LatLon$station_id))
CTA_LatLon[CTA_LatLon$station_id %in% n_occur$Var1[n_occur$Freq > 1],]
# duplicate exist for id 41400, remove the first row
CTA_LatLon<- CTA_LatLon[-c(which(CTA_LatLon$station_id == 41400)[1]),]
# merge location table with rides table
for ( station_id in CTA_LatLon$station_id){
CTA_daily$latitude[which(CTA_daily$station_id == station_id)] <- CTA_LatLon$latitude[[which(CTA_LatLon$station_id== station_id)]]
CTA_daily$longtitude[which(CTA_daily$station_id == station_id)] <- CTA_LatLon$longtitude[[which(CTA_LatLon$station_id== station_id)]]
CTA_LatLon$stationname[which(CTA_LatLon$station_id == station_id)] <-  CTA_daily$stationname[which(CTA_daily$station_id == station_id)][1]
}
# check if any of the location data is missing
na_CTA_daily <- subset(CTA_daily , is.na(CTA_daily$latitude))
unique(na_CTA_daily$station_id)
unique(na_CTA_daily$stationname)
# "Randolph/Wabash"(40200)  "Madison/Wabash"(40640)   "Washington/State"(40500) "Homan"(41580) are the missing location
# 41.884431, -87.626149   41.882023, -87.626098   41.8837, -87.6278   41.884914, -87.711327
# location from Wikipedia
na_latitude <- c(41.884431,41.882023,41.8837,41.884914)
na_longtitude <- c(-87.626149,-87.626098,-87.6278,-87.711327)
na_id <- c(40200,40640,40500,41580)
for( i in (1:4)){
CTA_daily$latitude[which(CTA_daily$station_id == na_id[i])] <- na_latitude[i]
CTA_daily$longtitude[which(CTA_daily$station_id == na_id[i])] <- na_longtitude[i]
CTA_LatLon <- rbind(CTA_LatLon, c(na_id[i],na_latitude[i],na_longtitude[i], CTA_daily$stationname[which(CTA_daily$station_id == na_id[i])][1]))
}
# re-check if any of the location data is missing
subset(CTA_daily , is.na(CTA_daily))
# get only columns station_id,stationname,date,rides
CTA_daily <- CTA_daily[,c("station_id","stationname","date","rides")]
# get only columns s"MAP_ID","STATION_NAME","Location"
CTA_LatLon <- CTA_LatLon[,c("MAP_ID","Location")]
colnames(CTA_LatLon)[1] <- "station_id"
CTA_LatLon$Location <- gsub('[( )]',"",as.character(CTA_LatLon$Location))
lat_lon<-unlist(strsplit(CTA_LatLon$Location,","))
CTA_LatLon$latitude <- lat_lon[c(TRUE, FALSE)]
CTA_LatLon$longtitude <- lat_lon[c(FALSE, TRUE)]
CTA_LatLon <- subset(CTA_LatLon,select= -c(Location))
CTA_LatLon$latitude <- as.numeric(CTA_LatLon$latitude)
CTA_LatLon$longtitude <- as.numeric(CTA_LatLon$longtitude)
CTA_LatLon <- unique(CTA_LatLon)
CTA_daily$latitude <- NA
CTA_daily$longtitude <- NA
CTA_LatLon$stationname <- NA
# check for duplicates of station_id
n_occur <- data.frame(table(CTA_LatLon$station_id))
CTA_LatLon[CTA_LatLon$station_id %in% n_occur$Var1[n_occur$Freq > 1],]
# duplicate exist for id 41400, remove the first row
CTA_LatLon<- CTA_LatLon[-c(which(CTA_LatLon$station_id == 41400)[1]),]
# merge location table with rides table
for ( station_id in CTA_LatLon$station_id){
CTA_daily$latitude[which(CTA_daily$station_id == station_id)] <- CTA_LatLon$latitude[[which(CTA_LatLon$station_id== station_id)]]
CTA_daily$longtitude[which(CTA_daily$station_id == station_id)] <- CTA_LatLon$longtitude[[which(CTA_LatLon$station_id== station_id)]]
CTA_LatLon$stationname[which(CTA_LatLon$station_id == station_id)] <-  CTA_daily$stationname[which(CTA_daily$station_id == station_id)][1]
}
# check if any of the location data is missing
na_CTA_daily <- subset(CTA_daily , is.na(CTA_daily$latitude))
unique(na_CTA_daily$station_id)
unique(na_CTA_daily$stationname)
# "Randolph/Wabash"(40200)  "Madison/Wabash"(40640)   "Washington/State"(40500) "Homan"(41580) are the missing location
# 41.884431, -87.626149   41.882023, -87.626098   41.8837, -87.6278   41.884914, -87.711327
# location from Wikipedia
na_latitude <- c(41.884431,41.882023,41.8837,41.884914)
na_longtitude <- c(-87.626149,-87.626098,-87.6278,-87.711327)
na_id <- c(40200,40640,40500,41580)
for( i in (1:4)){
CTA_daily$latitude[which(CTA_daily$station_id == na_id[i])] <- na_latitude[i]
CTA_daily$longtitude[which(CTA_daily$station_id == na_id[i])] <- na_longtitude[i]
CTA_LatLon <- rbind(CTA_LatLon, c(na_id[i],na_latitude[i],na_longtitude[i], CTA_daily$stationname[which(CTA_daily$station_id == na_id[i])][1]))
}
# re-check if any of the location data is missing
subset(CTA_daily , is.na(CTA_daily))
setwd("D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 2")
library(lubridate)
CTA_daily <- read.table(file = "CTA_-_Ridership_-__L__Station_Entries_-_Daily_Totals.tsv",sep='\t',quote="", header = TRUE)
CTA_LatLon <- read.table(file = "CTA_-_System_Information_-_List_of__L__Stops.tsv",sep='\t',quote="", header = TRUE)
# change first column name from `Ã¯..station_id` to `station_id`
colnames(CTA_daily)[1] <- "station_id"
# change first column name from `Ã¯..station_id` to `station_id`
colnames(CTA_LatLon)[1] <- "STOP_ID"
# check if any of the data is missing
subset(CTA_daily , is.na(CTA_daily))
# format the date
CTA_daily <- CTA_daily[complete.cases(CTA_daily), ]
CTA_daily$date <- mdy(CTA_daily$date)
# get only columns station_id,stationname,date,rides
CTA_daily <- CTA_daily[,c("station_id","stationname","date","rides")]
# get only columns s"MAP_ID","STATION_NAME","Location"
CTA_LatLon <- CTA_LatLon[,c("MAP_ID","Location")]
colnames(CTA_LatLon)[1] <- "station_id"
CTA_LatLon$Location <- gsub('[( )]',"",as.character(CTA_LatLon$Location))
lat_lon<-unlist(strsplit(CTA_LatLon$Location,","))
CTA_LatLon$latitude <- lat_lon[c(TRUE, FALSE)]
CTA_LatLon$longtitude <- lat_lon[c(FALSE, TRUE)]
CTA_LatLon <- subset(CTA_LatLon,select= -c(Location))
CTA_LatLon$latitude <- as.numeric(CTA_LatLon$latitude)
CTA_LatLon$longtitude <- as.numeric(CTA_LatLon$longtitude)
CTA_LatLon <- unique(CTA_LatLon)
CTA_daily$latitude <- NA
CTA_daily$longtitude <- NA
CTA_LatLon$stationname <- NA
# check for duplicates of station_id
n_occur <- data.frame(table(CTA_LatLon$station_id))
CTA_LatLon[CTA_LatLon$station_id %in% n_occur$Var1[n_occur$Freq > 1],]
# duplicate exist for id 41400, remove the first row
CTA_LatLon<- CTA_LatLon[-c(which(CTA_LatLon$station_id == 41400)[1]),]
# merge location table with rides table
for ( station_id in CTA_LatLon$station_id){
CTA_daily$latitude[which(CTA_daily$station_id == station_id)] <- CTA_LatLon$latitude[[which(CTA_LatLon$station_id== station_id)]]
CTA_daily$longtitude[which(CTA_daily$station_id == station_id)] <- CTA_LatLon$longtitude[[which(CTA_LatLon$station_id== station_id)]]
CTA_LatLon$stationname[which(CTA_LatLon$station_id == station_id)] <-  CTA_daily$stationname[which(CTA_daily$station_id == station_id)][1]
}
# check if any of the location data is missing
na_CTA_daily <- subset(CTA_daily , is.na(CTA_daily$latitude))
unique(na_CTA_daily$station_id)
unique(na_CTA_daily$stationname)
# "Randolph/Wabash"(40200)  "Madison/Wabash"(40640)   "Washington/State"(40500) "Homan"(41580) are the missing location
# 41.884431, -87.626149   41.882023, -87.626098   41.8837, -87.6278   41.884914, -87.711327
# location from Wikipedia
na_latitude <- c(41.884431,41.882023,41.8837,41.884914)
na_longtitude <- c(-87.626149,-87.626098,-87.6278,-87.711327)
na_id <- c(40200,40640,40500,41580)
for( i in (1:4)){
CTA_daily$latitude[which(CTA_daily$station_id == na_id[i])] <- na_latitude[i]
CTA_daily$longtitude[which(CTA_daily$station_id == na_id[i])] <- na_longtitude[i]
CTA_LatLon <- rbind(CTA_LatLon, c(na_id[i],na_latitude[i],na_longtitude[i], CTA_daily$stationname[which(CTA_daily$station_id == na_id[i])][1]))
}
# re-check if any of the location data is missing
subset(CTA_daily , is.na(CTA_daily))
summary(CTA_daily$date)
min(CTA_daily$date)
runApp('SubwayLarge')
runApp()
runApp('SubwayLarge')
runApp('SubwayLarge')
